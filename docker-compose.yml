version: '3'

services:
  frontend:
    image: ${FRONTEND_IMAGE}
    build: ./frontend
    ports:
      - 80:80
    restart: on-failure
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - front-tier
    command: ["sh", "-c", "nginx -g \"daemon off;\""]

  backend:
    image: ${BACKEND_IMAGE}
    build: ./backend
    restart: on-failure
    depends_on:
      database:
        condition: service_healthy
    networks:
      - front-tier
      - back-tier
    volumes:
      - upload-data-volume:/usr/src/app/upload
    healthcheck:
      test: ["CMD-SHELL", "curl localhost:3000 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: ["sh", "-c", "./docker-entrypoint.sh"]

  database:
    image: postgres:14.4-alpine
    environment:
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_DB_FILE: /run/secrets/postgres_db
    restart: on-failure
    networks:
      - back-tier
    volumes:
      - postgres-data-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U `cat $${POSTGRES_USER_FILE}` || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    secrets:
      - postgres_user
      - postgres_password
      - postgres_db

networks:
  front-tier:
    driver: bridge
  back-tier:
    driver: bridge

volumes:
  postgres-data-volume:
  upload-data-volume:

secrets:
  postgres_user:
    file: ./secrets/postgres_user.txt
  postgres_password:
    file: ./secrets/postgres_password.txt
  postgres_db:
    file: ./secrets/postgres_db.txt

x-aws-cloudformation:
  Resources:
    FrontendTCP80Listener:
      Properties:
        Certificates:
          - CertificateArn: "${CERTIFICATE_ARN}"
        Protocol: HTTPS
        Port: 443
    Fronttier80Ingress:
      Properties:
        FromPort: 443
        ToPort: 443
