# このワークフローはGitHubによって認定されていないアクションを使用します。
# それらはサードパーティによって提供され、
# 別個の利用規約、プライバシーポリシー、
# ドキュメントを参照してください。

# GitHub では、コミット SHA にアクションをピン留めすることが推奨されます。
# 新しいバージョンを取得するには、SHA を更新する必要があります。
# タグまたはブランチを参照することもできますが、アクションは警告なしに変更される可能性があります。

name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: "ap-northeast-1"
  ECR_REPOSITORY_BACKEND: "backend"
  ECR_REPOSITORY_FRONTEND: "frontend"
  ECS_SERVICE_BACKEND: "code-BackendService-pR6PUS2yAQnn"
  ECS_SERVICE_FRONTEND: "code-FrontendService-Cigp1KdSLqAM"
  ECS_CLUSTER: "code"
  ECS_TASK_DEFINITION_BACKEND: "ebd54692497c4fb28327037c70e0278b"
  ECS_TASK_DEFINITION_FRONTEND: "5f8028a2c5a24d8abfb502a191da42cc"
  CONTAINER_NAME_BACKEND: "task/code/ebd54692497c4fb28327037c70e0278b"
  CONTAINER_NAME_FRONTEND: "task/code/5f8028a2c5a24d8abfb502a191da42cc"

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create .env
        run: |
          echo "JWT_SECRET='${JWT_SECRET}'" > backend/.env
          echo "DATABASE_URL='${DATABASE_URL}'" >> backend/.env
          echo "FT_CID='${FT_CID}'" >> backend/.env
          echo "FT_SECRET='${FT_SECRET}'" >> backend/.env
          echo "TWO_FACTOR_AUTHENTICATION_APP_NAME='${TWO_FACTOR_AUTH_APP_NAME}'" >> backend/.env
          echo "FRONTEND_URL='${FRONTEND_URL}'" >> backend/.env
          echo "BACKEND_URL='${BACKEND_URL}'" >> backend/.env
          echo "VITE_APP_TITLE='${VITE_APP_TITLE}'" > frontend/.env
          echo "VITE_API_URL='${VITE_API_URL}'" >> frontend/.env
          echo "VITE_WS_BASE_URL='${VITE_WS_BASE_URL}'" >> frontend/.env
          echo "VITE_WS_CHAT_URL='${VITE_WS_CHAT_URL}'" >> frontend/.env
          echo "VITE_WS_DM_URL='${VITE_WS_DM_URL}'" >> frontend/.env
          echo "DATABASE_URL='${DATABASE_URL}'" >> frontend/.env
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          FT_CID: ${{ secrets.FT_CID }}
          FT_SECRET: ${{ secrets.FT_SECRET }}
          TWO_FACTOR_AUTH_APP_NAME: "TransPong"
          FRONTEND_URL: "http://code-LoadBa-U27C6YYNEJ11-a6ca8f4e85849e6c.elb.ap-northeast-1.amazonaws.com"
          BACKEND_URL: "http://code-LoadBa-U27C6YYNEJ11-a6ca8f4e85849e6c.elb.ap-northeast-1.amazonaws.com/api"
          VITE_APP_TITLE: "TransPong"
          VITE_API_URL: "http://code-LoadBa-U27C6YYNEJ11-a6ca8f4e85849e6c.elb.ap-northeast-1.amazonaws.com/api"
          VITE_WS_BASE_URL: "http://code-LoadBa-U27C6YYNEJ11-a6ca8f4e85849e6c.elb.ap-northeast-1.amazonaws.com"
          VITE_WS_CHAT_URL: "http://code-LoadBa-U27C6YYNEJ11-a6ca8f4e85849e6c.elb.ap-northeast-1.amazonaws.com/chat"
          VITE_WS_DM_URL: "http://code-LoadBa-U27C6YYNEJ11-a6ca8f4e85849e6c.elb.ap-northeast-1.amazonaws.com/dm"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG backend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
          echo "image-backend=$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG" >> $GITHUB_OUTPUT
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
          echo "image-frontend=$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new backend image ID in the Amazon ECS task definition
        id: task-def-backend
        uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_BACKEND }}
          container-name: ${{ env.CONTAINER_NAME_BACKEND }}
          image: ${{ steps.build-image.outputs.image-backend }}

      - name: Deploy Amazon ECS backend task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
        with:
          task-definition: ${{ steps.task-def-backend.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_BACKEND }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Fill in the new frontend image ID in the Amazon ECS task definition
        id: task-def-frontend
        uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_FRONTEND }}
          container-name: ${{ env.CONTAINER_NAME_FRONTEND }}
          image: ${{ steps.build-image.outputs.image-frontend }}

      - name: Deploy Amazon ECS frontend task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
        with:
          task-definition: ${{ steps.task-def-frontend.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_FRONTEND }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
