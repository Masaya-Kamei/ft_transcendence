
name: compose deploy

on: [pull_request]

env:
  AWS_REGION: "ap-northeast-1"
  ECR_REPOSITORY_BACKEND: "backend"
  ECR_REPOSITORY_FRONTEND: "frontend"

jobs:
  compose:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Create .env
        run: |
          echo "JWT_SECRET='${JWT_SECRET}'" > backend/.env
          echo "DATABASE_URL='${DATABASE_URL}'" >> backend/.env
          echo "FT_CID='${FT_CID}'" >> backend/.env
          echo "FT_SECRET='${FT_SECRET}'" >> backend/.env
          echo "TWO_FACTOR_AUTHENTICATION_APP_NAME='${TWO_FACTOR_AUTH_APP_NAME}'" >> backend/.env
          echo "FRONTEND_URL='${FRONTEND_URL}'" >> backend/.env
          echo "BACKEND_URL='${BACKEND_URL}'" >> backend/.env
          echo "VITE_APP_TITLE='${VITE_APP_TITLE}'" > frontend/.env
          echo "VITE_API_URL='${VITE_API_URL}'" >> frontend/.env
          echo "VITE_WS_BASE_URL='${VITE_WS_BASE_URL}'" >> frontend/.env
          echo "VITE_WS_CHAT_URL='${VITE_WS_CHAT_URL}'" >> frontend/.env
          echo "VITE_WS_DM_URL='${VITE_WS_DM_URL}'" >> frontend/.env
          echo "DATABASE_URL='${DATABASE_URL}'" >> frontend/.env
          echo "CERTIFICATE_ARN='${CERTIFICATE_ARN}'" >> .env
          mkdir -p secrets
          echo "${POSTGRES_USER}" > secrets/postgres_user.txt
          echo "${POSTGRES_PASSWORD}" > secrets/postgres_password.txt
          echo "${POSTGRES_DB}" > secrets/postgres_db.txt
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          FT_CID: ${{ secrets.FT_CID }}
          FT_SECRET: ${{ secrets.FT_SECRET }}
          TWO_FACTOR_AUTH_APP_NAME: "TransPong"
          FRONTEND_URL: "https://transpong-42-mk.com"
          BACKEND_URL: "https://transpong-42-mk.com/api"
          VITE_APP_TITLE: "TransPong"
          VITE_API_URL: "https://transpong-42-mk.com/api"
          VITE_WS_BASE_URL: "https://transpong-42-mk.com"
          VITE_WS_CHAT_URL: "https://transpong-42-mk.com/chat"
          VITE_WS_DM_URL: "https://transpong-42-mk.com/dm"
          CERTIFICATE_ARN: ${{ secrets.CERTIFICATE_ARN }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG backend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
          echo "BACKEND_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG" >> .env
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
          echo "FRONTEND_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG" >> .env

      - name: docker compose up
        run: |
          docker context create ecs ecs-actions
          docker context list
          docker context use ecs-actions
          docker compose up
